---
export interface Props {
  size?: Size;
  labelPosition?: LabelPosition;
  error?: string;
  passSecurity?: PassStrength;
  helperText?: string;
  required?: boolean;
}

export type Size = "sm" | "md" | "lg";

export type LabelPosition = "edge" | "inside" | "outside";

export enum PassStrength {
  "weak" = 1,
  "medium",
  "strong",
  "fortress",
}

const heightSizeStyles = {
  edge: {
    sm: "h-7",
    md: "h-9",
    lg: "h-11",
  },
  inside: {
    sm: "h-11",
    md: "h-12",
    lg: "h-14",
  },
  outside: {
    sm: "h-7",
    md: "h-9",
    lg: "h-11",
  },
};

const labelStyles = {
  edge: `left-10 peer-focus:-top-2 peer-focus:left-2 peer-focus:text-xs peer-focus:bg-white peer-focus:px-1 peer-focus:leading-3`,
  inside: `left-10 peer-focus:text-xs peer-focus:top-1 peer-focus:left-10`,
  outside: `-top-6 left-0 peer-focus:-top-6 peer-focus:left-0`,
};

const progressBarColor = [
  "bg-error-500",
  "bg-warning-500",
  "bg-brand-500",
  "bg-success-500",
];
const passStrengthTextColor = [
  "text-error-700",
  "text-warning-700",
  "text-grey-800",
  "text-success-700",
];

const iconSizeStyles = {
  sm: "text-sm",
  md: "text-base",
  lg: "text-xl",
};

const inputTextStyles: { [key: string]: string } = {
  sm: "text-xs tracking-normal",
  md: "text-sm tracking-normal",
  lg: "text-base tracking-wide",
};

const focusedInput = {
  edge: "",
  inside: "mt-4",
  outside: "",
};

const {
  size = "md",
  labelPosition = "edge",
  error,
  passSecurity,
  helperText = "",
  required = true,
} = Astro.props;
---

<div
  class:list={[
    "password-container w-full relative",
    labelPosition === "edge"
      ? "mt-1"
      : labelPosition === "outside"
        ? "mt-2"
        : "",
  ]}
>
  <div
    tabindex={0}
    data-error={`${!!error}`}
    class:list={[
      "relative flex items-center justify-between rounded-xl border px-3 transition-all z-10",
      heightSizeStyles[labelPosition][size],
      error ? "border-error-700" : "border-grey-300",
    ]}
  >
    <i class:list={["bi bi-shield-lock text-grey-500", iconSizeStyles[size]]}
    ></i>
    <input
      id="password"
      required={required}
      type="password"
      class:list={[
        "peer mx-2 w-full text-grey-800 outline-0 transition-all",
        inputTextStyles[size],
        focusedInput[labelPosition],
      ]}
    />
    <label
      data-position={labelPosition}
      data-size={size}
      for="password"
      class:list={[
        "absolute font-sans transition-transform",
        error
          ? "text-error-700 peer-focus:text-error-700"
          : "text-grey-500 peer-focus:text-grey-800",
        labelStyles[labelPosition],

        inputTextStyles[size],
      ]}
    >
      Password*
    </label>

    {
      error && (
        <i
          class:list={[
            "bi bi-exclamation-circle mr-2 text-error-700",
            iconSizeStyles[size],
          ]}
        />
      )
    }
    <div class="eye-container">
      <i class:list={["bi bi-eye text-grey-500", iconSizeStyles[size]]}></i>
      <i
        class:list={[
          "bi bi-eye-slash hidden text-grey-500",
          iconSizeStyles[size],
        ]}></i>
    </div>
  </div>
  <div class="mt-2 flex justify-between">
    {
      new Array(4)
        .fill(0)
        .map((_, index) => (
          <div
            class:list={[
              "h-0.75 w-6/25",
              passSecurity && Number(passSecurity) >= index + 1
                ? progressBarColor[passSecurity - 1]
                : "bg-grey-200",
            ]}
          />
        ))
    }
  </div>
  <div class="flex justify-between">
    {
      error ? (
        <div class="mt-1 text-xs text-error-700">{error}</div>
      ) : helperText ? (
        <div class="mt-1 text-xs text-grey-500">{helperText}</div>
      ) : (
        <div />
      )
    }
    {
      passSecurity && (
        <div
          class={`mt-1 text-xs ${passSecurity ? passStrengthTextColor[passSecurity - 1] : "text-grey-500"}`}
        >
          {PassStrength[passSecurity]}
        </div>
      )
    }
  </div>
</div>
<script>
  const activeLabelStyles: { [key: string]: string } = {
    edge: `-top-2 left-2 text-xs bg-white px-1 leading-3`,
    inside: `left-10 text-xs top-1 left-10`,
    outside: `-top-6 left-0 -top-6 left-0`,
  };

  const defaultLabelStyles: { [key: string]: string } = {
    edge: `left-10`,
    inside: `left-10`,
    outside: `-top-6 left-0`,
  };

  const inputTextStyles: { [key: string]: string } = {
    sm: "text-xs tracking-normal",
    md: "text-sm tracking-normal",
    lg: "text-base tracking-wide",
  };

  const elemContainers = document.querySelectorAll(".password-container");

  elemContainers.forEach((container) => {
    const eyeContainer = container.querySelector(".eye-container");
    const eyeElem = container.querySelector(".bi-eye");
    const eyeSlashElem = container.querySelector(".bi-eye-slash");
    const input = container.querySelector("input");
    const label = container.querySelector("label");
    const inputContainer = container.querySelector(
      "div[data-error]"
    ) as HTMLElement;

    if (eyeContainer) {
      eyeContainer.addEventListener("click", () => {
        const input = container.querySelector("input");
        if (input && input.type === "password") {
          input.type = "text";
          eyeElem && eyeElem.classList.add("hidden");
          eyeSlashElem && eyeSlashElem.classList.remove("hidden");
        } else if (input) {
          input.type = "password";
          eyeSlashElem && eyeSlashElem.classList.add("hidden");
          eyeElem && eyeElem.classList.remove("hidden");
        }
      });
    }

    if (input) {
      input.addEventListener("change", (e) => {
        if (e.target && (e.target as HTMLInputElement).value && label) {
          if (label && label.dataset.position) {
            label.className = `${label.className} ${activeLabelStyles[label.dataset.position]}`;
          }
        } else {
          if (label && label.dataset.position) {
            activeLabelStyles[label.dataset.position]
              .split(" ")
              .forEach((style) => {
                label && label.classList.remove(style);
                if (label && label.dataset.position) {
                  label.className = `${label.className} ${defaultLabelStyles[label.dataset.position]}`;
                }
              });
          }
          if (label && label.dataset.size) {
            inputTextStyles[label.dataset.size].split(" ").forEach((style) => {
              label && label.classList.add(style);
            });
          }
        }
      });
    }

    if (inputContainer) {
      inputContainer.addEventListener("focusin", () => {
        if (inputContainer && inputContainer.dataset) {
          if (inputContainer.dataset.error === "true") {
            inputContainer.classList.add("shadow-button-danger");
          } else {
            inputContainer.classList.add("shadow-button");
            inputContainer.classList.replace(
              "border-grey-300",
              "border-brand-500"
            );
          }
        }
      });

      inputContainer.addEventListener("focusout", () => {
        if (inputContainer && inputContainer.dataset) {
          if (inputContainer.dataset.error === "true") {
            inputContainer.classList.remove("shadow-button-danger");
          } else {
            inputContainer.classList.remove("shadow-button");
            inputContainer.classList.replace(
              "border-brand-500",
              "border-grey-300"
            );
          }
        }
      });
    }
  });
</script>
